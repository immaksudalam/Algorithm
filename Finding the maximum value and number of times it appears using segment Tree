#include <bits/stdc++.h>
using namespace std;
#define MAX 1005
pair<int, int> Tree[4*MAX];
int arr[MAX];
pair<int, int> Combine(pair<int, int> a, pair<int,int>b){
    if(a.first> b.first) return a;
    if(b.first> a.first) return b;

    return make_pair(a.first, (a.second + b.second));
}

void build(int node, int L, int R){
     if(L==R){
        Tree[node] = make_pair(arr[L],1);
        return;
     }
     int leftTree = 2*node;
     int rightTree = 2*node +1;
     int mid = (L+R)/2;
     build(leftTree, L,mid);
     build(rightTree, mid+1, R);
     Tree[node]=Combine(Tree[leftTree],Tree[rightTree]);

}

pair<int, int> Query(int node, int L, int R, int l, int r){
     if(l>R || r<L){
        return make_pair(INT_MIN, 0);
     }
     if(L>=l && R<=r){
        return Tree[node];
     }
     int leftNode = 2*node;
     int rightNode = 2*node +1;
     int mid = (L+R)/2;
     pair<int, int> x = Query(leftNode,L,mid, l,r);
     pair<int, int> y = Query(rightNode, mid+1, R, l,r);
     return Combine(x,y);

}

void Update(int node, int L, int R, int pos, int newVal){
     if(pos>R || pos<L)return;
     if(pos== L && pos == R){
        Tree[node]=make_pair(newVal,1);
        return;
     }
     int leftNode = 2*node;
     int rightNode = 2*node +1;
     int mid = (L+R)/2;
     Update(leftNode, L,mid, pos,newVal);
     Update(rightNode, mid+1, R, pos, newVal);
     Tree[node]=Combine(Tree[leftNode],Tree[rightNode]);

}

int main()
{
    int n;
    cin>>n;
    for(int i=1; i<=n; i++)cin>>arr[i];
    build(1,1,n);
    int q;
    cin>>q;
    for(int i=1; i<=q; i++){
        int l,r;
        cin>>l>>r;
        pair<int, int> ans;
        ans = Query(1,1,n,l,r);
        cout<<ans.first<<" "<<ans.second<<endl;
    }
}
